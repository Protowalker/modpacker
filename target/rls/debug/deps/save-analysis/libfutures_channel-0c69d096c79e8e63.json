{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5","program":"/home/protowalker/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_channel","--edition=2018","/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","opt-level=3","-Cembed-bitcode=no","-C","debuginfo=2","-C","debug-assertions=on","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=0c69d096c79e8e63","-C","extra-filename=-0c69d096c79e8e63","--out-dir","/home/protowalker/Code/Projects/modpacker/target/rls/debug/deps","-L","dependency=/home/protowalker/Code/Projects/modpacker/target/rls/debug/deps","--extern","futures_core=/home/protowalker/Code/Projects/modpacker/target/rls/debug/deps/libfutures_core-8645d5ba6f0d8661.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/protowalker/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/protowalker/Code/Projects/modpacker/target/rls/debug/deps/libfutures_channel-0c69d096c79e8e63.rmeta"},"prelude":{"crate_id":{"name":"futures_channel","disambiguator":[8641202127903201550,3901228744000286988]},"crate_root":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src","external_crates":[{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10344648486569477446,2454248652556920925]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","num":2,"id":{"name":"core","disambiguator":[14168888756904427512,16776303916459465465]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17407741297230913278,16283799328799007365]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4492142733197306814,14151866605630611617]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9785299734546160784,636286335322626912]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5680562745065174860,9217186745851755644]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[1647702202987759035,15124534591008137148]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16711431240759211485,3970175217288203291]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[125532023394459561,9172165323910118991]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[17639569287364244572,9623243733363078576]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[10466182059741283835,56412014413285874]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6793855748667116046,87956666511033926]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15647227138251999113,1639002543540862534]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[10550792004909319356,1806099500584167781]}},{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","num":15,"id":{"name":"futures_core","disambiguator":[12328024738403048804,10238717293729018217]}}],"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":0,"byte_end":1450,"line_start":1,"line_end":42,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":0,"byte_end":1450,"line_start":1,"line_end":42,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":34},{"krate":0,"index":252}],"decl_id":null,"docs":" Asynchronous channels.","sig":null,"attributes":[{"value":"! Asynchronous channels.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":0,"byte_end":26,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":27,"byte_end":30,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate provides channels that can be used to communicate between","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":31,"byte_end":103,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"! asynchronous tasks.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":104,"byte_end":127,"line_start":4,"line_end":4,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":128,"byte_end":131,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! All items of this library are only available when the `std` or `alloc` feature of this","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":132,"byte_end":222,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"! library is activated, and it is activated by default.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":223,"byte_end":280,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":407,"byte_end":495,"line_start":13,"line_end":13,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":663,"byte_end":684,"line_start":16,"line_end":16,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc","qualname":"::mpsc","value":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":340},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":343},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":354},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":90},{"krate":0,"index":369},{"krate":0,"index":380},{"krate":0,"index":378},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":382},{"krate":0,"index":397},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":400},{"krate":0,"index":413},{"krate":0,"index":411},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":415},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":441},{"krate":0,"index":439},{"krate":0,"index":438},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":139},{"krate":0,"index":153},{"krate":0,"index":167},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":251}],"decl_id":null,"docs":" A multi-producer, single-consumer queue for sending values across\n asynchronous tasks.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":1356,"byte_end":1379,"line_start":38,"line_end":38,"column_start":5,"column_end":28}},{"value":"! A multi-producer, single-consumer queue for sending values across","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975211,"byte_end":6975280,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"! asynchronous tasks.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975281,"byte_end":6975304,"line_start":2,"line_end":2,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975305,"byte_end":6975308,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! Similarly to the `std`, channel creation provides [`Receiver`] and","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975309,"byte_end":6975379,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"! [`Sender`] handles. [`Receiver`] implements [`Stream`] and allows a task to","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975380,"byte_end":6975459,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"! read values out of the channel. If there is no message to read from the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975460,"byte_end":6975535,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"! channel, the current task will be notified when a new value is sent.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975536,"byte_end":6975608,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! [`Sender`] implements the `Sink` trait and allows a task to send messages into","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975609,"byte_end":6975691,"line_start":8,"line_end":8,"column_start":1,"column_end":83}},{"value":"! the channel. If the channel is at capacity, the send will be rejected and","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975692,"byte_end":6975769,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"! the task will be notified when additional capacity is available. In other","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975770,"byte_end":6975847,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"! words, the channel provides backpressure.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975848,"byte_end":6975893,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975894,"byte_end":6975897,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Unbounded channels are also available using the `unbounded` constructor.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975898,"byte_end":6975974,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975975,"byte_end":6975978,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Disconnection","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975979,"byte_end":6975998,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6975999,"byte_end":6976002,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! When all [`Sender`] handles have been dropped, it is no longer","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976003,"byte_end":6976069,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"! possible to send values into the channel. This is considered the termination","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976070,"byte_end":6976150,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"! event of the stream. As such, [`Receiver::poll_next`]","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976151,"byte_end":6976208,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"! will return `Ok(Ready(None))`.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976209,"byte_end":6976243,"line_start":20,"line_end":20,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976244,"byte_end":6976247,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! If the [`Receiver`] handle is dropped, then messages can no longer","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976248,"byte_end":6976318,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"! be read out of the channel. In this case, all further attempts to send will","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976319,"byte_end":6976398,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"! result in an error.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976399,"byte_end":6976422,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976423,"byte_end":6976426,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! # Clean Shutdown","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976427,"byte_end":6976447,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976448,"byte_end":6976451,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! If the [`Receiver`] is simply dropped, then it is possible for","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976452,"byte_end":6976518,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"! there to be messages still in the channel that will not be processed. As","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976519,"byte_end":6976595,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"! such, it is usually desirable to perform a \"clean\" shutdown. To do this, the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976596,"byte_end":6976676,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"! receiver will first call `close`, which will prevent any further messages to","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976677,"byte_end":6976757,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"! be sent into the channel. Then, the receiver consumes the channel to","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976758,"byte_end":6976830,"line_start":32,"line_end":32,"column_start":1,"column_end":73}},{"value":"! completion, at which point the receiver can be dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976831,"byte_end":6976890,"line_start":33,"line_end":33,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976891,"byte_end":6976894,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! [`Sender`]: struct.Sender.html","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976895,"byte_end":6976929,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"! [`Receiver`]: struct.Receiver.html","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976930,"byte_end":6976968,"line_start":36,"line_end":36,"column_start":1,"column_end":39}},{"value":"! [`Stream`]: ../../futures_core/stream/trait.Stream.html","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6976969,"byte_end":6977028,"line_start":37,"line_end":37,"column_start":1,"column_end":60}},{"value":"! [`Receiver::poll_next`]:","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6977029,"byte_end":6977057,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"!     ../../futures_core/stream/trait.Stream.html#tymethod.poll_next","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6977058,"byte_end":6977128,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":343},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980502,"byte_end":6980508,"line_start":125,"line_end":125,"column_start":12,"column_end":18},"name":"Sender","qualname":"::mpsc::Sender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of a bounded mpsc channel.","sig":null,"attributes":[{"value":"/ The transmission end of a bounded mpsc channel.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980354,"byte_end":6980405,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980406,"byte_end":6980409,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`channel`](channel) function.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980410,"byte_end":6980473,"line_start":123,"line_end":123,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":350},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980700,"byte_end":6980715,"line_start":131,"line_end":131,"column_start":12,"column_end":27},"name":"UnboundedSender","qualname":"::mpsc::UnboundedSender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The transmission end of an unbounded mpsc channel.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980545,"byte_end":6980599,"line_start":127,"line_end":127,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980600,"byte_end":6980603,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`unbounded`](unbounded) function.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980604,"byte_end":6980671,"line_start":129,"line_end":129,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":357},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980987,"byte_end":6980995,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::mpsc::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":359}],"decl_id":null,"docs":" The receiving end of a bounded mpsc channel.","sig":null,"attributes":[{"value":"/ The receiving end of a bounded mpsc channel.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980842,"byte_end":6980890,"line_start":136,"line_end":136,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980891,"byte_end":6980894,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`channel`](channel) function.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980895,"byte_end":6980958,"line_start":138,"line_end":138,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":363},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981197,"byte_end":6981214,"line_start":148,"line_end":148,"column_start":12,"column_end":29},"name":"UnboundedReceiver","qualname":"::mpsc::UnboundedReceiver","value":"UnboundedReceiver {  }","parent":null,"children":[{"krate":0,"index":365}],"decl_id":null,"docs":" The receiving end of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The receiving end of an unbounded mpsc channel.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981045,"byte_end":6981096,"line_start":144,"line_end":144,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981097,"byte_end":6981100,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`unbounded`](unbounded) function.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981101,"byte_end":6981168,"line_start":146,"line_end":146,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":369},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981491,"byte_end":6981500,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"SendError","qualname":"::mpsc::SendError","value":"SendError {  }","parent":null,"children":[{"krate":0,"index":370}],"decl_id":null,"docs":" The error type for [`Sender`s](Sender) used as `Sink`s.\n","sig":null,"attributes":[{"value":"/ The error type for [`Sender`s](Sender) used as `Sink`s.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981381,"byte_end":6981440,"line_start":155,"line_end":155,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981639,"byte_end":6981651,"line_start":163,"line_end":163,"column_start":12,"column_end":24},"name":"TrySendError","qualname":"::mpsc::TrySendError","value":"TrySendError {  }","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" The error type returned from [`try_send`](Sender::try_send).\n","sig":null,"attributes":[{"value":"/ The error type returned from [`try_send`](Sender::try_send).","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981531,"byte_end":6981595,"line_start":161,"line_end":161,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981861,"byte_end":6981873,"line_start":175,"line_end":175,"column_start":12,"column_end":24},"name":"TryRecvError","qualname":"::mpsc::TryRecvError","value":"TryRecvError {  }","parent":null,"children":[{"krate":0,"index":93}],"decl_id":null,"docs":" The error type returned from [`try_next`](Receiver::try_next).\n","sig":null,"attributes":[{"value":"/ The error type returned from [`try_next`](Receiver::try_next).","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981783,"byte_end":6981849,"line_start":174,"line_end":174,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982323,"byte_end":6982330,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"is_full","qualname":"<SendError>::is_full","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this error is a result of the channel being full.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this error is a result of the channel being full.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982240,"byte_end":6982311,"line_start":192,"line_end":192,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982547,"byte_end":6982562,"line_start":201,"line_end":201,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<SendError>::is_disconnected","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this error is a result of the receiver being dropped.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this error is a result of the receiver being dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982460,"byte_end":6982535,"line_start":200,"line_end":200,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983387,"byte_end":6983394,"line_start":231,"line_end":231,"column_start":12,"column_end":19},"name":"is_full","qualname":"<TrySendError<T>>::is_full","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this error is a result of the channel being full.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this error is a result of the channel being full.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983304,"byte_end":6983375,"line_start":230,"line_end":230,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983537,"byte_end":6983552,"line_start":236,"line_end":236,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<TrySendError<T>>::is_disconnected","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this error is a result of the receiver being dropped.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this error is a result of the receiver being dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983450,"byte_end":6983525,"line_start":235,"line_end":235,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983693,"byte_end":6983703,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TrySendError<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the message that was attempted to be sent but failed.\n","sig":null,"attributes":[{"value":"/ Returns the message that was attempted to be sent but failed.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983616,"byte_end":6983681,"line_start":240,"line_end":240,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983811,"byte_end":6983826,"line_start":246,"line_end":246,"column_start":12,"column_end":27},"name":"into_send_error","qualname":"<TrySendError<T>>::into_send_error","value":"fn (self) -> SendError","parent":null,"children":[],"decl_id":null,"docs":" Drops the message and converts into a `SendError`.\n","sig":null,"attributes":[{"value":"/ Drops the message and converts into a `SendError`.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983745,"byte_end":6983799,"line_start":245,"line_end":245,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6987237,"byte_end":6987244,"line_start":363,"line_end":363,"column_start":8,"column_end":15},"name":"channel","qualname":"::mpsc::channel","value":"fn <T> (buffer: usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a bounded mpsc channel for communicating between asynchronous tasks.","sig":null,"attributes":[{"value":"/ Creates a bounded mpsc channel for communicating between asynchronous tasks.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986611,"byte_end":6986691,"line_start":352,"line_end":352,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986692,"byte_end":6986695,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ Being bounded, this channel provides backpressure to ensure that the sender","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986696,"byte_end":6986775,"line_start":354,"line_end":354,"column_start":1,"column_end":80}},{"value":"/ outpaces the receiver by only a limited amount. The channel's capacity is","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986776,"byte_end":6986853,"line_start":355,"line_end":355,"column_start":1,"column_end":78}},{"value":"/ equal to `buffer + num-senders`. In other words, each sender gets a","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986854,"byte_end":6986925,"line_start":356,"line_end":356,"column_start":1,"column_end":72}},{"value":"/ guaranteed slot in the channel capacity, and on top of that there are","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986926,"byte_end":6986999,"line_start":357,"line_end":357,"column_start":1,"column_end":74}},{"value":"/ `buffer` \"first come, first serve\" slots available to all senders.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6987000,"byte_end":6987070,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6987071,"byte_end":6987074,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ The [`Receiver`](Receiver) returned implements the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6987075,"byte_end":6987129,"line_start":360,"line_end":360,"column_start":1,"column_end":55}},{"value":"/ [`Stream`](futures_core::stream::Stream) trait, while [`Sender`](Sender) implements","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6987130,"byte_end":6987217,"line_start":361,"line_end":361,"column_start":1,"column_end":88}},{"value":"/ `Sink`.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6987218,"byte_end":6987229,"line_start":362,"line_end":362,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988508,"byte_end":6988517,"line_start":400,"line_end":400,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::mpsc::unbounded","value":"fn <T> () -> (UnboundedSender<T>, UnboundedReceiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an unbounded mpsc channel for communicating between asynchronous\n tasks.","sig":null,"attributes":[{"value":"/ Creates an unbounded mpsc channel for communicating between asynchronous","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6987996,"byte_end":6988072,"line_start":390,"line_end":390,"column_start":1,"column_end":77}},{"value":"/ tasks.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988073,"byte_end":6988083,"line_start":391,"line_end":391,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988084,"byte_end":6988087,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ A `send` on this channel will always succeed as long as the receive half has","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988088,"byte_end":6988168,"line_start":393,"line_end":393,"column_start":1,"column_end":81}},{"value":"/ not been closed. If the receiver falls behind, messages will be arbitrarily","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988169,"byte_end":6988248,"line_start":394,"line_end":394,"column_start":1,"column_end":80}},{"value":"/ buffered.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988249,"byte_end":6988262,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988263,"byte_end":6988266,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ **Note** that the amount of available system memory is an implicit bound to","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988267,"byte_end":6988346,"line_start":397,"line_end":397,"column_start":1,"column_end":80}},{"value":"/ the channel. Using an `unbounded` channel has the ability of causing the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988347,"byte_end":6988423,"line_start":398,"line_end":398,"column_start":1,"column_end":77}},{"value":"/ process to run out of memory. In this case, the process will be aborted.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6988424,"byte_end":6988500,"line_start":399,"line_end":399,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6998929,"byte_end":6998937,"line_start":712,"line_end":712,"column_start":12,"column_end":20},"name":"try_send","qualname":"<Sender<T>>::try_send","value":"fn (&mut self, msg: T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send a message on this `Sender`, returning the message\n if there was an error.\n","sig":null,"attributes":[{"value":"/ Attempts to send a message on this `Sender`, returning the message","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6998816,"byte_end":6998886,"line_start":710,"line_end":710,"column_start":5,"column_end":75}},{"value":"/ if there was an error.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6998891,"byte_end":6998917,"line_start":711,"line_end":711,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999498,"byte_end":6999508,"line_start":730,"line_end":730,"column_start":12,"column_end":22},"name":"start_send","qualname":"<Sender<T>>::start_send","value":"fn (&mut self, msg: T) -> Result<(), SendError>","parent":null,"children":[],"decl_id":null,"docs":" Send a message on the channel.","sig":null,"attributes":[{"value":"/ Send a message on the channel.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999282,"byte_end":6999316,"line_start":725,"line_end":725,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999321,"byte_end":6999324,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ This function should only be called after","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999329,"byte_end":6999374,"line_start":727,"line_end":727,"column_start":5,"column_end":50}},{"value":"/ [`poll_ready`](Sender::poll_ready) has reported that the channel is","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999379,"byte_end":6999450,"line_start":728,"line_end":728,"column_start":5,"column_end":76}},{"value":"/ ready to receive a message.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999455,"byte_end":6999486,"line_start":729,"line_end":729,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000136,"byte_end":7000146,"line_start":747,"line_end":747,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<Sender<T>>::poll_ready","value":"fn (&mut self, cx: &mut Context<'_>) -> Poll<Result<(), SendError>>","parent":null,"children":[],"decl_id":null,"docs":" Polls the channel to determine if there is guaranteed capacity to send\n at least one item without waiting.","sig":null,"attributes":[{"value":"/ Polls the channel to determine if there is guaranteed capacity to send","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999625,"byte_end":6999699,"line_start":735,"line_end":735,"column_start":5,"column_end":79}},{"value":"/ at least one item without waiting.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999704,"byte_end":6999742,"line_start":736,"line_end":736,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999747,"byte_end":6999750,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999755,"byte_end":6999773,"line_start":738,"line_end":738,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999778,"byte_end":6999781,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ This method returns:","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999786,"byte_end":6999810,"line_start":740,"line_end":740,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999815,"byte_end":6999818,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(Ok(_))` if there is sufficient capacity;","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999823,"byte_end":6999882,"line_start":742,"line_end":742,"column_start":5,"column_end":64}},{"value":"/ - `Poll::Pending` if the channel may not have","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999887,"byte_end":6999936,"line_start":743,"line_end":743,"column_start":5,"column_end":54}},{"value":"/   capacity, in which case the current task is queued to be notified once","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6999941,"byte_end":7000017,"line_start":744,"line_end":744,"column_start":5,"column_end":81}},{"value":"/   capacity is available;","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000022,"byte_end":7000050,"line_start":745,"line_end":745,"column_start":5,"column_end":33}},{"value":"/ - `Poll::Ready(Err(SendError))` if the receiver has been dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000055,"byte_end":7000124,"line_start":746,"line_end":746,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000471,"byte_end":7000480,"line_start":758,"line_end":758,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<Sender<T>>::is_closed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[{"value":"/ Returns whether this channel is closed without needing a context.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000390,"byte_end":7000459,"line_start":757,"line_end":757,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000670,"byte_end":7000683,"line_start":763,"line_end":763,"column_start":12,"column_end":25},"name":"close_channel","qualname":"<Sender<T>>::close_channel","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes this channel from the sender side, preventing any new messages.\n","sig":null,"attributes":[{"value":"/ Closes this channel from the sender side, preventing any new messages.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000584,"byte_end":7000658,"line_start":762,"line_end":762,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000899,"byte_end":7000909,"line_start":770,"line_end":770,"column_start":12,"column_end":22},"name":"disconnect","qualname":"<Sender<T>>::disconnect","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disconnects this sender from the channel, closing it if there are no more senders left.\n","sig":null,"attributes":[{"value":"/ Disconnects this sender from the channel, closing it if there are no more senders left.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000796,"byte_end":7000887,"line_start":769,"line_end":769,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001027,"byte_end":7001040,"line_start":775,"line_end":775,"column_start":12,"column_end":25},"name":"same_receiver","qualname":"<Sender<T>>::same_receiver","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the senders send to the same receiver.\n","sig":null,"attributes":[{"value":"/ Returns whether the senders send to the same receiver.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7000957,"byte_end":7001015,"line_start":774,"line_end":774,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001283,"byte_end":7001296,"line_start":783,"line_end":783,"column_start":12,"column_end":25},"name":"hash_receiver","qualname":"<Sender<T>>::hash_receiver","value":"fn <H> (&self, hasher: &mut H) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Hashes the receiver into the provided hasher\n","sig":null,"attributes":[{"value":"/ Hashes the receiver into the provided hasher","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001223,"byte_end":7001271,"line_start":782,"line_end":782,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001577,"byte_end":7001587,"line_start":793,"line_end":793,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<UnboundedSender<T>>::poll_ready","value":"fn (&self, _: &mut Context<'_>) -> Poll<Result<(), SendError>>","parent":null,"children":[],"decl_id":null,"docs":" Check if the channel is ready to receive a message.\n","sig":null,"attributes":[{"value":"/ Check if the channel is ready to receive a message.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001510,"byte_end":7001565,"line_start":792,"line_end":792,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001908,"byte_end":7001917,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<UnboundedSender<T>>::is_closed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[{"value":"/ Returns whether this channel is closed without needing a context.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001827,"byte_end":7001896,"line_start":803,"line_end":803,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002109,"byte_end":7002122,"line_start":809,"line_end":809,"column_start":12,"column_end":25},"name":"close_channel","qualname":"<UnboundedSender<T>>::close_channel","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes this channel from the sender side, preventing any new messages.\n","sig":null,"attributes":[{"value":"/ Closes this channel from the sender side, preventing any new messages.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002023,"byte_end":7002097,"line_start":808,"line_end":808,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002330,"byte_end":7002340,"line_start":816,"line_end":816,"column_start":12,"column_end":22},"name":"disconnect","qualname":"<UnboundedSender<T>>::disconnect","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disconnects this sender from the channel, closing it if there are no more senders left.\n","sig":null,"attributes":[{"value":"/ Disconnects this sender from the channel, closing it if there are no more senders left.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002227,"byte_end":7002318,"line_start":815,"line_end":815,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003057,"byte_end":7003067,"line_start":841,"line_end":841,"column_start":12,"column_end":22},"name":"start_send","qualname":"<UnboundedSender<T>>::start_send","value":"fn (&mut self, msg: T) -> Result<(), SendError>","parent":null,"children":[],"decl_id":null,"docs":" Send a message on the channel.","sig":null,"attributes":[{"value":"/ Send a message on the channel.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002862,"byte_end":7002896,"line_start":837,"line_end":837,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002901,"byte_end":7002904,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ This method should only be called after `poll_ready` has been used to","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002909,"byte_end":7002982,"line_start":839,"line_end":839,"column_start":5,"column_end":78}},{"value":"/ verify that the channel is ready to receive a message.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7002987,"byte_end":7003045,"line_start":840,"line_end":840,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003432,"byte_end":7003446,"line_start":851,"line_end":851,"column_start":12,"column_end":26},"name":"unbounded_send","qualname":"<UnboundedSender<T>>::unbounded_send","value":"fn (&self, msg: T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends a message along this channel.","sig":null,"attributes":[{"value":"/ Sends a message along this channel.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003186,"byte_end":7003225,"line_start":846,"line_end":846,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003230,"byte_end":7003233,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ This is an unbounded sender, so this function differs from `Sink::send`","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003238,"byte_end":7003313,"line_start":848,"line_end":848,"column_start":5,"column_end":80}},{"value":"/ by ensuring the return type reflects that the channel is always ready to","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003318,"byte_end":7003394,"line_start":849,"line_end":849,"column_start":5,"column_end":81}},{"value":"/ receive messages.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003399,"byte_end":7003420,"line_start":850,"line_end":850,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003605,"byte_end":7003618,"line_start":856,"line_end":856,"column_start":12,"column_end":25},"name":"same_receiver","qualname":"<UnboundedSender<T>>::same_receiver","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the senders send to the same receiver.\n","sig":null,"attributes":[{"value":"/ Returns whether the senders send to the same receiver.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003535,"byte_end":7003593,"line_start":855,"line_end":855,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003861,"byte_end":7003874,"line_start":864,"line_end":864,"column_start":12,"column_end":25},"name":"hash_receiver","qualname":"<UnboundedSender<T>>::hash_receiver","value":"fn <H> (&self, hasher: &mut H) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Hashes the receiver into the provided hasher\n","sig":null,"attributes":[{"value":"/ Hashes the receiver into the provided hasher","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7003801,"byte_end":7003849,"line_start":863,"line_end":863,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007455,"byte_end":7007460,"line_start":981,"line_end":981,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of a channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of a channel, without dropping it.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007218,"byte_end":7007282,"line_start":977,"line_end":977,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007287,"byte_end":7007290,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007295,"byte_end":7007370,"line_start":979,"line_end":979,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007375,"byte_end":7007443,"line_start":980,"line_end":980,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7008243,"byte_end":7008251,"line_start":1001,"line_end":1001,"column_start":12,"column_end":20},"name":"try_next","qualname":"<Receiver<T>>::try_next","value":"fn (&mut self) -> Result<Option<T>, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to receive the next message without notifying a context if empty.","sig":null,"attributes":[{"value":"/ Tries to receive the next message without notifying a context if empty.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007855,"byte_end":7007930,"line_start":993,"line_end":993,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007935,"byte_end":7007938,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ It is not recommended to call this function from inside of a future,","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007943,"byte_end":7008015,"line_start":995,"line_end":995,"column_start":5,"column_end":77}},{"value":"/ only when you've otherwise arranged to be notified when the channel is","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7008020,"byte_end":7008094,"line_start":996,"line_end":996,"column_start":5,"column_end":79}},{"value":"/ no longer empty.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7008099,"byte_end":7008119,"line_start":997,"line_end":997,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7008124,"byte_end":7008127,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called after `try_next` or `poll_next` has","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7008132,"byte_end":7008206,"line_start":999,"line_end":999,"column_start":5,"column_end":79}},{"value":"/ returned `None`.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7008211,"byte_end":7008231,"line_start":1000,"line_end":1000,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012284,"byte_end":7012289,"line_start":1117,"line_end":1117,"column_start":12,"column_end":17},"name":"close","qualname":"<UnboundedReceiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of a channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of a channel, without dropping it.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012047,"byte_end":7012111,"line_start":1113,"line_end":1113,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012116,"byte_end":7012119,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012124,"byte_end":7012199,"line_start":1115,"line_end":1115,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012204,"byte_end":7012272,"line_start":1116,"line_end":1116,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012791,"byte_end":7012799,"line_start":1131,"line_end":1131,"column_start":12,"column_end":20},"name":"try_next","qualname":"<UnboundedReceiver<T>>::try_next","value":"fn (&mut self) -> Result<Option<T>, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to receive the next message without notifying a context if empty.","sig":null,"attributes":[{"value":"/ Tries to receive the next message without notifying a context if empty.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012403,"byte_end":7012478,"line_start":1123,"line_end":1123,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012483,"byte_end":7012486,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ It is not recommended to call this function from inside of a future,","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012491,"byte_end":7012563,"line_start":1125,"line_end":1125,"column_start":5,"column_end":77}},{"value":"/ only when you've otherwise arranged to be notified when the channel is","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012568,"byte_end":7012642,"line_start":1126,"line_end":1126,"column_start":5,"column_end":79}},{"value":"/ no longer empty.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012647,"byte_end":7012667,"line_start":1127,"line_end":1127,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012672,"byte_end":7012675,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called after `try_next` or `poll_next` has","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012680,"byte_end":7012754,"line_start":1129,"line_end":1129,"column_start":5,"column_end":79}},{"value":"/ returned `None`.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012759,"byte_end":7012779,"line_start":1130,"line_end":1130,"column_start":5,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":252},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oneshot","qualname":"::oneshot","value":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":460},{"krate":0,"index":466},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":281},{"krate":0,"index":287},{"krate":0,"index":469},{"krate":0,"index":473},{"krate":0,"index":290},{"krate":0,"index":477},{"krate":0,"index":488},{"krate":0,"index":487},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":479},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":301},{"krate":0,"index":305}],"decl_id":null,"docs":" A channel for sending a single message between asynchronous tasks.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":1402,"byte_end":1427,"line_start":40,"line_end":40,"column_start":5,"column_end":30}},{"value":"! A channel for sending a single message between asynchronous tasks.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024189,"byte_end":7024259,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":448},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024729,"byte_end":7024737,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::oneshot::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":450}],"decl_id":null,"docs":" A future for a value that will be provided by another asynchronous task.","sig":null,"attributes":[{"value":"/ A future for a value that will be provided by another asynchronous task.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024503,"byte_end":7024579,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024580,"byte_end":7024583,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`channel`] function.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024584,"byte_end":7024632,"line_start":15,"line_end":15,"column_start":1,"column_end":49}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024633,"byte_end":7024700,"line_start":16,"line_end":16,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":454},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024913,"byte_end":7024919,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Sender","qualname":"::oneshot::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":456}],"decl_id":null,"docs":" A means of transmitting a single value to another task.","sig":null,"attributes":[{"value":"/ A means of transmitting a single value to another task.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024772,"byte_end":7024831,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024832,"byte_end":7024835,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`channel`] function.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7024836,"byte_end":7024884,"line_start":24,"line_end":24,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":268},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027935,"byte_end":7027942,"line_start":103,"line_end":103,"column_start":8,"column_end":15},"name":"channel","qualname":"::oneshot::channel","value":"fn <T> () -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new one-shot channel for sending values across asynchronous tasks.","sig":null,"attributes":[{"value":"/ Creates a new one-shot channel for sending values across asynchronous tasks.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7026824,"byte_end":7026904,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7026905,"byte_end":7026908,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This function is similar to Rust's channel constructor found in the standard","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7026909,"byte_end":7026989,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ library. Two halves are returned, the first of which is a `Sender` handle,","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7026990,"byte_end":7027068,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"/ used to signal the end of a computation and provide its value. The second","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027069,"byte_end":7027146,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ half is a `Receiver` which implements the `Future` trait, resolving to the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027147,"byte_end":7027225,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ value that was given to the `Sender` handle.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027226,"byte_end":7027274,"line_start":77,"line_end":77,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027275,"byte_end":7027278,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Each half can be separately owned and sent across tasks.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027279,"byte_end":7027339,"line_start":79,"line_end":79,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027340,"byte_end":7027343,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027344,"byte_end":7027358,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027359,"byte_end":7027362,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027363,"byte_end":7027370,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027371,"byte_end":7027405,"line_start":84,"line_end":84,"column_start":1,"column_end":35}},{"value":"/ use std::{thread, time::Duration};","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027406,"byte_end":7027444,"line_start":85,"line_end":85,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027445,"byte_end":7027448,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let (sender, receiver) = oneshot::channel::<i32>();","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027449,"byte_end":7027504,"line_start":87,"line_end":87,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027505,"byte_end":7027508,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ thread::spawn(|| {","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027509,"byte_end":7027531,"line_start":89,"line_end":89,"column_start":1,"column_end":23}},{"value":"/     println!(\"THREAD: sleeping zzz...\");","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027532,"byte_end":7027576,"line_start":90,"line_end":90,"column_start":1,"column_end":45}},{"value":"/     thread::sleep(Duration::from_millis(1000));","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027577,"byte_end":7027628,"line_start":91,"line_end":91,"column_start":1,"column_end":52}},{"value":"/     println!(\"THREAD: i'm awake! sending.\");","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027629,"byte_end":7027677,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"/     sender.send(3).unwrap();","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027678,"byte_end":7027710,"line_start":93,"line_end":93,"column_start":1,"column_end":33}},{"value":"/ });","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027711,"byte_end":7027718,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027719,"byte_end":7027722,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ println!(\"MAIN: doing some useful stuff\");","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027723,"byte_end":7027769,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027770,"byte_end":7027773,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ futures::executor::block_on(async {","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027774,"byte_end":7027813,"line_start":98,"line_end":98,"column_start":1,"column_end":40}},{"value":"/     println!(\"MAIN: waiting for msg...\");","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027814,"byte_end":7027859,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/     println!(\"MAIN: got: {:?}\", receiver.await)","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027860,"byte_end":7027911,"line_start":100,"line_end":100,"column_start":1,"column_end":52}},{"value":"/ });","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027912,"byte_end":7027919,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7027920,"byte_end":7027927,"line_start":102,"line_end":102,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037239,"byte_end":7037243,"line_start":342,"line_end":342,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"fn (self, t: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Completes this oneshot with a successful result.","sig":null,"attributes":[{"value":"/ Completes this oneshot with a successful result.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036717,"byte_end":7036769,"line_start":332,"line_end":332,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036774,"byte_end":7036777,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This function will consume `self` and indicate to the other end, the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036782,"byte_end":7036854,"line_start":334,"line_end":334,"column_start":5,"column_end":77}},{"value":"/ [`Receiver`](Receiver), that the value provided is the result of the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036859,"byte_end":7036931,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ computation this represents.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036936,"byte_end":7036968,"line_start":336,"line_end":336,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036973,"byte_end":7036976,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ If the value is successfully enqueued for the remote end to receive,","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036981,"byte_end":7037053,"line_start":338,"line_end":338,"column_start":5,"column_end":77}},{"value":"/ then `Ok(())` is returned. If the receiving end was dropped before","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037058,"byte_end":7037128,"line_start":339,"line_end":339,"column_start":5,"column_end":75}},{"value":"/ this function was called, however, then `Err` is returned with the value","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037133,"byte_end":7037209,"line_start":340,"line_end":340,"column_start":5,"column_end":81}},{"value":"/ provided.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037214,"byte_end":7037227,"line_start":341,"line_end":341,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037900,"byte_end":7037913,"line_start":358,"line_end":358,"column_start":12,"column_end":25},"name":"poll_canceled","qualname":"<Sender<T>>::poll_canceled","value":"fn (&mut self, cx: &mut Context<'_>) -> Poll<()>","parent":null,"children":[],"decl_id":null,"docs":" Polls this `Sender` half to detect whether its associated\n [`Receiver`](Receiver) with has been dropped.","sig":null,"attributes":[{"value":"/ Polls this `Sender` half to detect whether its associated","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037313,"byte_end":7037374,"line_start":346,"line_end":346,"column_start":5,"column_end":66}},{"value":"/ [`Receiver`](Receiver) with has been dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037379,"byte_end":7037428,"line_start":347,"line_end":347,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037433,"byte_end":7037436,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ # Return values","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037441,"byte_end":7037460,"line_start":349,"line_end":349,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037465,"byte_end":7037468,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If `Ready(())` is returned then the associated `Receiver` has been","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037473,"byte_end":7037543,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ dropped, which means any work required for sending should be canceled.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037548,"byte_end":7037622,"line_start":352,"line_end":352,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037627,"byte_end":7037630,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ If `Pending` is returned then the associated `Receiver` is still","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037635,"byte_end":7037703,"line_start":354,"line_end":354,"column_start":5,"column_end":73}},{"value":"/ alive and may be able to receive a message if sent. The current task,","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037708,"byte_end":7037781,"line_start":355,"line_end":355,"column_start":5,"column_end":78}},{"value":"/ however, is scheduled to receive a notification if the corresponding","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037786,"byte_end":7037858,"line_start":356,"line_end":356,"column_start":5,"column_end":77}},{"value":"/ `Receiver` goes away.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7037863,"byte_end":7037888,"line_start":357,"line_end":357,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038278,"byte_end":7038290,"line_start":367,"line_end":367,"column_start":12,"column_end":24},"name":"cancellation","qualname":"<Sender<T>>::cancellation","value":"fn (&mut self) -> Cancellation<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that resolves when this `Sender`'s corresponding\n [`Receiver`](Receiver) half has hung up.","sig":null,"attributes":[{"value":"/ Creates a future that resolves when this `Sender`'s corresponding","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038009,"byte_end":7038078,"line_start":362,"line_end":362,"column_start":5,"column_end":74}},{"value":"/ [`Receiver`](Receiver) half has hung up.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038083,"byte_end":7038127,"line_start":363,"line_end":363,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038132,"byte_end":7038135,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ This is a utility wrapping [`poll_canceled`](Sender::poll_canceled)","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038140,"byte_end":7038211,"line_start":365,"line_end":365,"column_start":5,"column_end":76}},{"value":"/ to expose a [`Future`](core::future::Future). ","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038216,"byte_end":7038266,"line_start":366,"line_end":366,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038714,"byte_end":7038725,"line_start":377,"line_end":377,"column_start":12,"column_end":23},"name":"is_canceled","qualname":"<Sender<T>>::is_canceled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests to see whether this `Sender`'s corresponding `Receiver`\n has been dropped.","sig":null,"attributes":[{"value":"/ Tests to see whether this `Sender`'s corresponding `Receiver`","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038375,"byte_end":7038440,"line_start":371,"line_end":371,"column_start":5,"column_end":70}},{"value":"/ has been dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038445,"byte_end":7038466,"line_start":372,"line_end":372,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038471,"byte_end":7038474,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Unlike [`poll_canceled`](Sender::poll_canceled), this function does not","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038479,"byte_end":7038554,"line_start":374,"line_end":374,"column_start":5,"column_end":80}},{"value":"/ enqueue a task for wakeup upon cancellation, but merely reports the","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038559,"byte_end":7038630,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ current state, which may be subject to concurrent modification.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038635,"byte_end":7038702,"line_start":376,"line_end":376,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":469},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039145,"byte_end":7039157,"line_start":393,"line_end":393,"column_start":12,"column_end":24},"name":"Cancellation","qualname":"::oneshot::Cancellation","value":"Cancellation {  }","parent":null,"children":[{"krate":0,"index":472}],"decl_id":null,"docs":" A future that resolves when the receiving end of a channel has hung up.","sig":null,"attributes":[{"value":"/ A future that resolves when the receiving end of a channel has hung up.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038877,"byte_end":7038952,"line_start":388,"line_end":388,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038953,"byte_end":7038956,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ This is an `.await`-friendly interface around [`poll_canceled`](Sender::poll_canceled).","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038957,"byte_end":7039048,"line_start":390,"line_end":390,"column_start":1,"column_end":92}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039049,"byte_end":7039116,"line_start":391,"line_end":391,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":477},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039547,"byte_end":7039555,"line_start":408,"line_end":408,"column_start":12,"column_end":20},"name":"Canceled","qualname":"::oneshot::Canceled","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned from a [`Receiver`](Receiver) when the corresponding\n [`Sender`](Sender) is dropped.\n","sig":null,"attributes":[{"value":"/ Error returned from a [`Receiver`](Receiver) when the corresponding","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039384,"byte_end":7039455,"line_start":405,"line_end":405,"column_start":1,"column_end":72}},{"value":"/ [`Sender`](Sender) is dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039456,"byte_end":7039490,"line_start":406,"line_end":406,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040163,"byte_end":7040168,"line_start":427,"line_end":427,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Gracefully close this receiver, preventing any subsequent attempts to\n send to it.","sig":null,"attributes":[{"value":"/ Gracefully close this receiver, preventing any subsequent attempts to","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039791,"byte_end":7039864,"line_start":420,"line_end":420,"column_start":5,"column_end":78}},{"value":"/ send to it.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039869,"byte_end":7039884,"line_start":421,"line_end":421,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039889,"byte_end":7039892,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ Any `send` operation which happens after this method returns is","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039897,"byte_end":7039964,"line_start":423,"line_end":423,"column_start":5,"column_end":72}},{"value":"/ guaranteed to fail. After calling this method, you can use","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039969,"byte_end":7040031,"line_start":424,"line_end":424,"column_start":5,"column_end":67}},{"value":"/ [`Receiver::poll`](core::future::Future::poll) to determine whether a","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040036,"byte_end":7040109,"line_start":425,"line_end":425,"column_start":5,"column_end":78}},{"value":"/ message had previously been sent.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040114,"byte_end":7040151,"line_start":426,"line_end":426,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040599,"byte_end":7040607,"line_start":439,"line_end":439,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"fn (&mut self) -> Result<Option<T>, Canceled>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a message outside of the context of a task.","sig":null,"attributes":[{"value":"/ Attempts to receive a message outside of the context of a task.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040223,"byte_end":7040290,"line_start":431,"line_end":431,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040295,"byte_end":7040298,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ Does not schedule a task wakeup or have any other side effects.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040303,"byte_end":7040370,"line_start":433,"line_end":433,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040375,"byte_end":7040378,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ A return value of `None` must be considered immediately stale (out of","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040383,"byte_end":7040456,"line_start":435,"line_end":435,"column_start":5,"column_end":78}},{"value":"/ date) unless [`close`](Receiver::close) has been called first.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040461,"byte_end":7040527,"line_start":436,"line_end":436,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040532,"byte_end":7040535,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the sender was dropped.","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040540,"byte_end":7040587,"line_start":438,"line_end":438,"column_start":5,"column_end":52}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6973219,"byte_end":6973223,"line_start":34,"line_end":34,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6973260,"byte_end":6973264,"line_start":35,"line_end":35,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6973280,"byte_end":6973284,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6974125,"byte_end":6974132,"line_start":64,"line_end":64,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6974385,"byte_end":6974392,"line_start":73,"line_end":73,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6974755,"byte_end":6974762,"line_start":84,"line_end":84,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020718,"byte_end":7020723,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020761,"byte_end":7020766,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020783,"byte_end":7020787,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020983,"byte_end":7020988,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7023890,"byte_end":7023895,"line_start":167,"line_end":167,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980283,"byte_end":6980303,"line_start":118,"line_end":118,"column_start":19,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980328,"byte_end":6980346,"line_start":119,"line_end":119,"column_start":19,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980817,"byte_end":6980832,"line_start":134,"line_end":134,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981356,"byte_end":6981373,"line_start":153,"line_end":153,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981916,"byte_end":6981925,"line_start":179,"line_end":179,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982205,"byte_end":6982214,"line_start":189,"line_end":189,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982224,"byte_end":6982233,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982721,"byte_end":6982733,"line_start":209,"line_end":209,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982940,"byte_end":6982952,"line_start":217,"line_end":217,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983254,"byte_end":6983266,"line_start":227,"line_end":227,"column_start":47,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983282,"byte_end":6983294,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983894,"byte_end":6983906,"line_start":251,"line_end":251,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6984063,"byte_end":6984075,"line_start":258,"line_end":258,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6984224,"byte_end":6984236,"line_start":264,"line_end":264,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986332,"byte_end":6986342,"line_start":335,"line_end":335,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6989017,"byte_end":6989037,"line_start":426,"line_end":426,"column_start":9,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6991718,"byte_end":6991736,"line_start":507,"line_end":507,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6998800,"byte_end":6998806,"line_start":709,"line_end":709,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001485,"byte_end":7001500,"line_start":791,"line_end":791,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7004073,"byte_end":7004079,"line_start":872,"line_end":872,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7004178,"byte_end":7004193,"line_start":878,"line_end":878,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7004310,"byte_end":7004330,"line_start":884,"line_end":884,"column_start":19,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7005406,"byte_end":7005424,"line_start":915,"line_end":915,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7006638,"byte_end":7006658,"line_start":948,"line_end":948,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7006903,"byte_end":7006921,"line_start":959,"line_end":959,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007200,"byte_end":7007208,"line_start":976,"line_end":976,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7010703,"byte_end":7010711,"line_start":1065,"line_end":1065,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7010743,"byte_end":7010751,"line_start":1067,"line_end":1067,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7010852,"byte_end":7010860,"line_start":1073,"line_end":1073,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7011740,"byte_end":7011748,"line_start":1100,"line_end":1100,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012020,"byte_end":7012037,"line_start":1112,"line_end":1112,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7014736,"byte_end":7014753,"line_start":1181,"line_end":1181,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7014854,"byte_end":7014871,"line_start":1187,"line_end":1187,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7015747,"byte_end":7015764,"line_start":1214,"line_end":1214,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016076,"byte_end":7016090,"line_start":1232,"line_end":1232,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016373,"byte_end":7016385,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016911,"byte_end":7016925,"line_start":1262,"line_end":1262,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016962,"byte_end":7016976,"line_start":1263,"line_end":1263,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7017014,"byte_end":7017026,"line_start":1265,"line_end":1265,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7017063,"byte_end":7017075,"line_start":1266,"line_end":1266,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7025027,"byte_end":7025035,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7025060,"byte_end":7025066,"line_start":32,"line_end":32,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7028167,"byte_end":7028172,"line_start":114,"line_end":114,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036701,"byte_end":7036707,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038802,"byte_end":7038808,"line_start":382,"line_end":382,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039219,"byte_end":7039231,"line_start":397,"line_end":397,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039580,"byte_end":7039588,"line_start":410,"line_end":410,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039752,"byte_end":7039760,"line_start":417,"line_end":417,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039773,"byte_end":7039781,"line_start":419,"line_end":419,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040710,"byte_end":7040718,"line_start":444,"line_end":444,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040928,"byte_end":7040936,"line_start":455,"line_end":455,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":1392,"byte_end":1396,"line_start":39,"line_end":39,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lib.rs","byte_start":1440,"byte_end":1447,"line_start":41,"line_end":41,"column_start":13,"column_end":20},"ref_id":{"krate":0,"index":252}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6973219,"byte_end":6973223,"line_start":34,"line_end":34,"column_start":31,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6973260,"byte_end":6973264,"line_start":35,"line_end":35,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":308},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6973280,"byte_end":6973284,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6974125,"byte_end":6974132,"line_start":64,"line_end":64,"column_start":19,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6974385,"byte_end":6974392,"line_start":73,"line_end":73,"column_start":22,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2087}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/lock.rs","byte_start":6974755,"byte_end":6974762,"line_start":84,"line_end":84,"column_start":18,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020718,"byte_end":7020723,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020761,"byte_end":7020766,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020783,"byte_end":7020787,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7020983,"byte_end":7020988,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/queue.rs","byte_start":7023890,"byte_end":7023895,"line_start":167,"line_end":167,"column_start":18,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":322},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980283,"byte_end":6980303,"line_start":118,"line_end":118,"column_start":19,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":329},"to":{"krate":2,"index":1944}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980328,"byte_end":6980346,"line_start":119,"line_end":119,"column_start":19,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":1944}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980773,"byte_end":6980777,"line_start":133,"line_end":133,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1903},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980780,"byte_end":6980784,"line_start":133,"line_end":133,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1915},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980787,"byte_end":6980792,"line_start":133,"line_end":133,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6980817,"byte_end":6980832,"line_start":134,"line_end":134,"column_start":22,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":350},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981356,"byte_end":6981373,"line_start":153,"line_end":153,"column_start":19,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":363},"to":{"krate":2,"index":1944}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6981916,"byte_end":6981925,"line_start":179,"line_end":179,"column_start":23,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":369},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982205,"byte_end":6982214,"line_start":189,"line_end":189,"column_start":28,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":369},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982224,"byte_end":6982233,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982721,"byte_end":6982733,"line_start":209,"line_end":209,"column_start":24,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6982940,"byte_end":6982952,"line_start":217,"line_end":217,"column_start":26,"column_end":38},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":382},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983254,"byte_end":6983266,"line_start":227,"line_end":227,"column_start":47,"column_end":59},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":382},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983282,"byte_end":6983294,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6983894,"byte_end":6983906,"line_start":251,"line_end":251,"column_start":21,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6984063,"byte_end":6984075,"line_start":258,"line_end":258,"column_start":23,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6984224,"byte_end":6984236,"line_start":264,"line_end":264,"column_start":28,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6986332,"byte_end":6986342,"line_start":335,"line_end":335,"column_start":6,"column_end":16},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6989017,"byte_end":6989037,"line_start":426,"line_end":426,"column_start":9,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6991718,"byte_end":6991736,"line_start":507,"line_end":507,"column_start":9,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":6998800,"byte_end":6998806,"line_start":709,"line_end":709,"column_start":9,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7001485,"byte_end":7001500,"line_start":791,"line_end":791,"column_start":9,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7004073,"byte_end":7004079,"line_start":872,"line_end":872,"column_start":19,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7004178,"byte_end":7004193,"line_start":878,"line_end":878,"column_start":19,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":350},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7004310,"byte_end":7004330,"line_start":884,"line_end":884,"column_start":19,"column_end":39},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":329},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7005406,"byte_end":7005424,"line_start":915,"line_end":915,"column_start":19,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7006638,"byte_end":7006658,"line_start":948,"line_end":948,"column_start":18,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":329},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7006903,"byte_end":7006921,"line_start":959,"line_end":959,"column_start":18,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7007200,"byte_end":7007208,"line_start":976,"line_end":976,"column_start":9,"column_end":17},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7010703,"byte_end":7010711,"line_start":1065,"line_end":1065,"column_start":19,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":357},"to":{"krate":2,"index":1944}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7010743,"byte_end":7010751,"line_start":1067,"line_end":1067,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":357},"to":{"krate":15,"index":82}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7010852,"byte_end":7010860,"line_start":1073,"line_end":1073,"column_start":20,"column_end":28},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":357},"to":{"krate":15,"index":68}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7011740,"byte_end":7011748,"line_start":1100,"line_end":1100,"column_start":18,"column_end":26},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":357},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7012020,"byte_end":7012037,"line_start":1112,"line_end":1112,"column_start":9,"column_end":26},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":363},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7014736,"byte_end":7014753,"line_start":1181,"line_end":1181,"column_start":25,"column_end":42},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":363},"to":{"krate":15,"index":82}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7014854,"byte_end":7014871,"line_start":1187,"line_end":1187,"column_start":20,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":363},"to":{"krate":15,"index":68}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7015747,"byte_end":7015764,"line_start":1214,"line_end":1214,"column_start":18,"column_end":35},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":363},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016076,"byte_end":7016090,"line_start":1232,"line_end":1232,"column_start":9,"column_end":23},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":415},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016373,"byte_end":7016385,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016911,"byte_end":7016925,"line_start":1262,"line_end":1262,"column_start":31,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7016962,"byte_end":7016976,"line_start":1263,"line_end":1263,"column_start":31,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7017014,"byte_end":7017026,"line_start":1265,"line_end":1265,"column_start":31,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":424},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/mpsc/mod.rs","byte_start":7017063,"byte_end":7017075,"line_start":1266,"line_end":1266,"column_start":31,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":424},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7025027,"byte_end":7025035,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":448},"to":{"krate":2,"index":1944}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7025060,"byte_end":7025066,"line_start":32,"line_end":32,"column_start":19,"column_end":25},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":454},"to":{"krate":2,"index":1944}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7028167,"byte_end":7028172,"line_start":114,"line_end":114,"column_start":9,"column_end":14},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7036701,"byte_end":7036707,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7038802,"byte_end":7038808,"line_start":382,"line_end":382,"column_start":18,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":454},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039219,"byte_end":7039231,"line_start":397,"line_end":397,"column_start":20,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":8293}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039580,"byte_end":7039588,"line_start":410,"line_end":410,"column_start":23,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":477},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039752,"byte_end":7039760,"line_start":417,"line_end":417,"column_start":28,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":477},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7039773,"byte_end":7039781,"line_start":419,"line_end":419,"column_start":9,"column_end":17},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040710,"byte_end":7040718,"line_start":444,"line_end":444,"column_start":20,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":448},"to":{"krate":2,"index":8293}},{"span":{"file_name":"/home/protowalker/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.5/src/oneshot.rs","byte_start":7040928,"byte_end":7040936,"line_start":455,"line_end":455,"column_start":18,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":448},"to":{"krate":2,"index":2098}}]}